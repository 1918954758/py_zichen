Python3列表
    序列是python中最基本的数据结构。
    序列中的每个值都有对应的位置值，称之为索引，第一个索引是0，第二个索引是1，以此类推。
    python有6个序列的内置类型，但最常见的列表和元组。
    列表都可以进行操作包括索引，切片，加，乘，检查成员。
    此外，python已经内置确定雪猎的长度以及确定最大和最小的元素的方法。
    列表是最常用的python数据类型，它可以作为一个方括号内的逗号分隔值出现。
    列表的数据项不需要具有相同的类型。
    创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下：
        list1 = ['Google', 'Runoob', 1997, 2000]
        list2 = [1, 2, 3, 4, 5]
        lsit3 = ["a", "b", "c", "d"]
        list4 = ['red', 'green', 'blue', 'yellow', 'white', 'black']
1. 访问列表中的值
    索引从0开始：
        print(list1[0])
        print(list2[1])
        print(list3[3])
        print(list4[5])
    索引从-1开始：
        print(list1[-1])
        print(list2[-2])
        print(list3[-4])
        print(list4[-6])
    字符串截取：
        nums = ['10', '20', '30', '40', '50', '60', '70', '80', '90']
        print(nums[1:3]) ==> ['20', '30']
        print(nums[3:5]) ==> ['40', '50']
        print(nums[:4]) ==> ['10', '20', '30', '40']
        print(nums[3:-4]) ==> ['40', '50']
        output ==>
                ['20', '30']
                ['40', '50']
                ['10', '20', '30', '40']
                ['40', '50']
2. 更新列表
    我们可以对列表的数据项进行修改或更新，也可以使用append()方法来添加列表项，如下：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        list = ['Google', 'Runoob', 1997, 2000]
        print("第三个元素为：", list[2])
        list[2] = 2001
        print("更新后的第三个元素为：", list[2])
        output ==>
                第三个元素为： 1997
                更新后的第三个元素为： 2001
3. 删除列表元素
    我们可以使用del语句来删除列表的元素，如下：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        list = ['Google', 'Runoob', 1997, 2000]
        print("原始列表：", list)
        del list[2]
        print("删除第三个元素：", list)
        output ==>
                原始列表： ['Google', 'Runoob', 1997, 2000]
                删除第三个元素： ['Google', 'Runoob', 2000]
4. python列表脚本操作符
    len([1, 2, 3])                          3                                   长度
    [1, 2, 3] + [4, 5, 6]                   [1, 2, 3, 4, 5, 6]                  组合
    ['Hi!'] * 4                             ['Hi!', 'Hi!', 'Hi!', 'Hi!']        重复
    3 in [1, 2, 3]                          True                                元素是否存在于列表中
    for x in [1, 2, 3]: print(x, end=" ")   1 2 3                               迭代
5. python列表截取于拼接
    L = ['Google', 'Runoob', 'Taobao']
    L[2]        'Taobao'                读取第三个元素
    L[-2]       'Runoob'                从右侧开始读取倒数第二个元素:count from the right
    L[1:]       ['Runoob', 'Taobao']    输出从第二个元素开始后的所有元素
    列表还支持 += 符号
        >>> squares = [1, 4, 9, 16, 25]
        >>> squares += [36, 49, 64, 81, 100]
        >>> squares
        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
        >>>
6. 嵌套列表
    使用嵌套列表即在列表里创建其他列表，例如：
        >>> a = ['a', 'b', 'c']
        >>> n = [1, 2, 3]
        >>> x = [a, n]
        >>> x
        [['a', 'b', 'c'], [1, 2, 3]]
        >>> x[0]
        ['a', 'b', 'c']
        >>> x[0][1]
        'b'
7. python列表函数&方法
    len(list)       元素个数
    max(list)       返回列表元素最大值
    min(list)       返回列表元素最小值
    list(seq)       将元组转换为列表
    python包含以下方法：
        list.append(obj)                        在列表末尾添加新的对象
        list.count(obj)                         统计某个元素在列表中出现的次数
        list.extend(obj)                        在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)
        list.index(obj)                         在列表中找出某个值第一个匹配项的索引位置
        list.insert(index, obj)                 将对象插入列表
        list.pop([index=-1])                    移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值
        list.remove(obj)                        移除列表中某个值得第一个匹配项
        list.reverse()                          反向列表中元素
        list.sort(key=None, reverse=False)      对愿列表进行排序
        list.clear()                            清空列表
        list.copy()                             赋值列表
     实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-

        list = [1, 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6]
        seq = ['a', 'b', 'c', 'd']

        if __name__ == '__main__':
            print(list)
            list.append(3)
            print(list)
            count = list.count(7)
            print(count)
            list.extend(seq)
            print(list)
            print(list.index(6))
            list.insert(1, 'zichen')
            print(list)
            list.pop()
            print(list)
            list.pop(-2)
            print(list)
            list.remove(2)
            print(list)
            list.reverse()
            print(list)
            # list.sort(key=None, reverse=False)
            # print(list)
            list2 = list.copy()
            print(list2)
            list2.clear()
            print(list2)
            output==>
                    [1, 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6]
                    [1, 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3]
                    3
                    [1, 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3, 'a', 'b', 'c', 'd']
                    11
                    [1, 'zichen', 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3, 'a', 'b', 'c', 'd']
                    [1, 'zichen', 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3, 'a', 'b', 'c']
                    [1, 'zichen', 2, 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3, 'a', 'c']
                    [1, 'zichen', 3, 4, 7, 5, 9, 3, 5, 2, 3, 6, 2, 8, 4, 5, 7, 4, 5, 9, 5, 0, 4, 6, 3, 2, 5, 7, 8, 4, 6, 3, 0, 0, 3, 5, 6, 3, 'a', 'c']
                    ['c', 'a', 3, 6, 5, 3, 0, 0, 3, 6, 4, 8, 7, 5, 2, 3, 6, 4, 0, 5, 9, 5, 4, 7, 5, 4, 8, 2, 6, 3, 2, 5, 3, 9, 5, 7, 4, 3, 'zichen', 1]
                    ['c', 'a', 3, 6, 5, 3, 0, 0, 3, 6, 4, 8, 7, 5, 2, 3, 6, 4, 0, 5, 9, 5, 4, 7, 5, 4, 8, 2, 6, 3, 2, 5, 3, 9, 5, 7, 4, 3, 'zichen', 1]
                    []
