Python 基础语法
python2：
    Python 语言与 Perl，C 等语言有许多相似之处。但是，也存在一些差异。
1. 交互式编程
    交互式编程不需要创建脚本文件，是通过Python解释器的交互模式来进行编写代码。
    linux上只需要在命令行中输入Python命令即可启动交互式编程，
    $ python
    Python 2.7.6 (default, Sep 9 2014, 15:04:36)
    [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
    Window上在安装Python时已经安装了交互式编程客户端，提示信息如下：
    Python 2.7.4 (default, Apr 6 2013, 19:54:46) [MSC v.1500 32 (Intel)] on win32
    Type "copyright", "credits" or "license()" for more information.
    >>>

2. 脚本式编程
    通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。
    让我们洗衣歌简单的Python脚本程序。所有Python文件将以 .py 为扩展名：
    #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        print("Hello, Python!")
    这里，假设我们已经设置了Python解释器PATH变量。使用以下命令运行程序：
        $ python test.py
    输出：
        Hello, Python!

python3:
    python3源码文件以UTF-8编码，所有字符串都是Unicode字符串。当然我们也可以为源码文件指定不同的编码：
        # -*- coding: cp-1252 -*-
        上述定义允许在源文件中使用Window-1252字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。
1. 标识符
    - 第一个字符必须是字母或者下划线
    - 标识符的其他部分由字母、数字和下划线组成
    - 标识符对大小写敏感
    - 在python3中，可以使用中文名作为标识符，非ASCII标识符也是允许的
2. 保留字(关键字)
    ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
3. 注释
    Python中单行注释：    # ....
    Python中多行注释：    a. 多个 #
                        b.  ''' ... '''     """ ... """
4. 行与缩进
    python最具有特色的就是使用缩进来表示代码块，不需要使用大括号：{}。
    缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。如下：
        if True :
            print("True")
        else :
            print("False")
    如果缩进不一致，会报错： IndentationError: unindent does not match any outer indentation level
5. 多行语句
    python通常是一行写完一条语句，如果语句很长，我们可以使用反斜杠(\)来实现多行语句，例如：
        total = item_one + \
                item_two + \
                item_three
    在[], {} 或() 中的多行语句，不需要使用反斜杠(\)，例如：
        total = ['item_one', 'item_two', 'item_three',
                'item_four', 'item_five']
6. 数字Number类型
    python中数字有四种类型：整数、布尔型、浮点数和复数。
        - int 整数，如1， 只有一种整数类型int，表示长整型，没有python2中的Long。
        - bool 布尔，如True.
        - float 浮点数， 如 123.123、3E-2。
        - complex 复数， 如 1 + 2j、1.1 + 2.2j。
7. 字符串String
    - python中单引号和双引号的使用完全相同。
    - 使用三引号('''或者""")可以指定一个多行字符串。
    - 转义符 \
    - 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。如r"this is a line with \n"则会显示\n，并不是换行。
    - 按字面义级联字符串，如"this" "is" "string"会被自动转换为this is string。
    - 字符串可以用 + 运算符链接在一起，用 * 运算符重复。
    - python中字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
    - python中的字符串不能改变
    - python没有单独的字符类型，一个字符就是一个长度为1的字符串。
    - 字符串的截取的语法格式如下：变量[头下标:尾下标:步长]。
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        str = 'Runoob'
        print(str)
        print(str[0:1])
        print(str[0])
        print(str[2:5])
        print(str[2:])
        print(str * 2)
        print(str + "你好，世界")
        print('----------------------------------------')
        print('hello \nrunoob')
        print(r'hello \nrunoob')
        这里的r/R 指的是 row string
8. 空行
    函数之间或者类的方法之间用空行分割，表示一段新的代码开始。类和函数入口之间也用一行空行分割，以突出函数入口的开始。
    空行与代码缩进不同，空行并不是python语法的一部分。书写时，不插入空行也不会报错。
    空行也是程序代码的一部分。
9. 等待用户输入
        #!/usr/bin/python
        # -*- coding:UTF-8 -*-
        input('\n\n按下 enter 键后退出。')
10. 同一行显示多条语句
    python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：
        #!/usr/bin/python
        # -*- coding:UTF-8 -*-
        import sys; x = 'runoob'; sys.stdout.write(x + '\n')
11. 多个语句构成代码组
    缩进相同的一组语句构成一个代码块，我们称之为代码组。
    例如：
        if expression :
            suite
        elif expression :
            suite
        else :
            suite
12. Print输出
    print默认输出是换行的，如果想要实现不换行，需要在变量末尾加上 end="":
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        x = 'a'
        y = 'b'
        # 换行输出
        print(x)
        print(y)
        print('---------------------')
        # 不换行输出
        print(x, end=" ")
        print(y, end=" ")
        print()
13. import与from...import
    在python用import或者from...import来导入相应的模块。
    - 将整个模块(somemodule)导入，格式为：import somemodule
    - 从某个模块导入某个函数，格式为：from somemodule import somefunction
    - 从某个模块导入多个函数，格式为：from somedule import firstfunc, secondfunc, thirdfunc
    - 将某个模块中全部导入，格式为：from somedule import *
    例如：
        # 导入sys模块
        import sys
        # 导入sys模块的argv, path成员
        import sys from argv, path
        print('path', path)
14. 命令行参数
    $ python -h
    usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
    Options and arguments (and corresponding environment variables):
    -c cmd  : program passed in as string (terminates option list)
    -d      : debug output from parse (also PYTHONDEBUG=x)
    -E      : ignore environment variables (such as PYTHONPATH)
    -h      : print this help message and exit
    [etc.]