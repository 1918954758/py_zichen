Python3元组
    python的元组与列表类型，不同之处在于元组元素不能修改。
    元组使用小括号()，列表使用方括号[]。
    元组的创建很简单，只需要在括号中添加元素，并且使用逗号隔开即可。
        tuple = ("Google", "Runoob", "Taobao")
    实例：
        >>> tup1 = ("Google", "Runoob", 1997, 2000)
        >>> tup2 = (1, 2, 3, 4, 5)
        >>> tup3 = "a", "b", "c", "d"       # 不需要括号也可以
        >>> type(tup3)
        <class 'tuple'>
    创建空元组：
        tup1 = ()
    元组中质保函一个元素时，需要在元素后面添加逗号，否则括号会被当做运算符使用：
        实例：
            >>> tup1 = (50)
            >>> type = (tup1)       # 不加逗号，类型为整型
            <class 'int'>

            >>> tup1 = (50,)
            >>> type(tup1)          # 加上逗号，类型为元组
            <class 'tuple'>
    元组与字符串类似，下标索引从0开始，可以进行截取，组合等。
        tup1 = ('Google', 'Runoob', 1997, 2000, 26.8, 0)
        正向索引----------------------------------------------------------------------
                          0           1          2           3           4          5
                        Google      Runoob      1997        2000        26.8        0
                          -6          -5         -4          -3          -2         -1
        反向索引-----------------------------------------------------------------------
1. 访问元组
    元组可以使用下标索引来访问元组中的值，如下实例：
    实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            tup1 = ('Google', 'Runoob', 1997, 2000)
            tup2 = (1, 2, 3, 4, 5, 6, 7)
            print("tup1[0]：", tup1[0])
            print("tup2[1:5]：", tup2[1:5])
2. 修改元素
    元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，实例如下：
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        tup1 = (12, 34, 56)
        tup2 = ('abc', 'xyz')

        # 以下修改元组元素操作时非法的。
        # tup1[0] = 00
        # 创建一个新的元组
        tup3 = tup1 + tup2
        print(tup3)
        output==> (12, 34, 56, 'abc', 'xyz')
3. 删除元组
    元祖中的元素是不允许删除的，但我们可以使用del语句来删除整个元组，如下：
        实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            tup = ('Google', 'Runoob', 1997, 2000)
            print(tup)
            del tup
            print(tup)
            output==>
                    ('Google', 'Runoob', 1997, 2000)
                    Traceback (most recent call last):
                      File "E:/py/py_zichen/python_base/PythonCode/python基本数据类型/删除元组.py", line 9, in <module>
                        print(tup)
                    NameError: name 'tup' is not defined
4. 元组运算符
    与数字一样，元组之间可以使用 + 号和 - 号进行运算。这就意味着他们可以组合和复制，运算后生成一个新的元组。
        len((1, 2, 3))                      3                               计算元素个数
        (1, 2, 3) + (4, 5, 6)               (1, 2, 3, 4, 5, 6)              连接
        ("Hi!") * 4                         ("Hi!", "Hi!", "Hi!", "Hi!")    复制
        3 in (1, 2, 3)                      True                            元素是否存在
        for x in (1, 2, 3): print(x,)       1 2 3                           迭代
5. 元组索引，截取
    因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：
        元组：
            tup = ('Google', 'Runoob', 'Taobao', 'Wiki', 'Weibo', 'Weixin')
            正向索引
                           -6          -5          -4         -3        -2          -1
                        'Google'    'Runoob'    'Taobao'    'Wiki'    'Weibo'    'Weixin'
                           0            1           2         3          4           5
            逆向索引
            >>> tup[1]
            'Runoob'
            >>> tup[-2]
            'Weibo'
            >>> tup[1:]
            ('Runoob', 'Taobo', 'Wiki', 'Weibo', 'Weixin')
            >>> tup[1:4]
            ('Runoob', 'Taobao', 'Wiki')
6. 元组内置函数
    python元组包含了一下内置函数
    len(tup)            计算元组元素个数
    max(tup)            返回元组中元素最大值
    min(tup)            返回元组中元素最小值
    tuple(iterable)     将可迭代系列转换为元组
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        tup = ('a', 'b', 'c', 'd', 'e')
        lit = [1, 2, 3, 4, 5, 6]
        if __name__ == '__main__':
            print(max(tup))
            print(min(tup))
            print(len(tup))
            print(tuple(lit))
        output==>
                e
                a
                5
                (1, 2, 3, 4, 5, 6)
7. 关于元组是不可变的
    所谓元组的不可变指的是元组所指向的内存中的内容不可变。
        >>> tup = ('r', 'u', 'n', 'o', 'o', 'b')
        >>> tup[0] = 'g'            # 不支持修改元素
        Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
        TypeError: 'tuple' object does not support item assignment
        >>> id(tup)
        4440687904
        >>> tup = (1, 2, 3)
        >>> id(tup)
        4441088800                  # 内存地址不一样了
    从以上实例可以看出，重新赋值的元组tup，绑定到新的对象了，不是修改了原来的对象。