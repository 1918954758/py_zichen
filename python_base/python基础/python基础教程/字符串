python3字符串
    字符串是python中最常用的数据类型。我们可以使用引号'或"来创建字符串。
    字符串的创建:
        var1 = 'Hello World!'
        var2 = 'ZiChen'
1. python访问字符串中的值
    python不支持单字符类型，单字符在python中也是作为一个字符串使用。
    python访问子字符串，可以使用方括号[]来截取字符串，字符串的截取的语法格式如下：
        变量[头下标:尾下标]
    索引值以0为开始值，-1为从末尾的开始位置。
        从后面索引：         -6      -5     -4       -3      -2      -1
        从前面索引：         0       1       2       3       4       5
                            Z       i       C       h       e       n
        从前面截取：        :     1      2       3       4       5     :
        从后面截取：        :     -5     -4      -3      -2      -1    :
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        var1 = 'Hello World!'
        var2 = "ZiChen"
        print("var1[0]：", var1[0])
        print("var2[1:5]：", var2[1:5])
2. python字符串更新
    我们可以截取字符串的一部分并与其他字段拼接，实例如下：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        var1 = 'Hello World!'
        print("已更新字符串：", var1[:6] + 'ZiChen!')
3. python转义字符
    在需要在字符中使用特殊字符时，python用反斜杠(\)转义字符。如下表：
        \           在行尾时，为续航符
        \\          反斜杠符号
        \'          单引号
        \"          双引号
        \a          响铃
        \b          退格符(Backspace)
        \000        空
        \n          换行
        \v          纵向换行
        \t          横向制表符
        \r          回车
        \f          换页
        \oyy        八进制数，yy代表的字符，例如：\o12代表换行，其中o是字母，不是数字0
        \xyy        十六进制数，yy代表字符，例如：\x0a代表换行
        \other      其他的字符以普通格式输出
4. python字符串运算符
    下表实例变量a值为字符串"Hello"，b变量值为"Python"：
        +       字符串连接                                         a + b输出结果：HelloPython
        -       重复输出字符串                                      a * 2输出结果：HelloHello
        []      通过索引获取字符串中字符                             a[1]输出结果e
        [:]     截取字符串中的一部分，遵循左闭右开原则                 a[1:4]输出结果ell
        in      成员运算符 - 如果字符串中包含给定的字符返回True        'H' in a 输出结果True
        not in  成员运算符 - 如果字符串中不包含给定的字符返回True      'M' not in 输出结果True
        r/R     使转义符无效                                        print(r'\n')  print(R'\n')
        %       格式字符串
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        a = 'Hello'
        b = 'Python'
        if __name__ == '__main__':
            print("a + b输出结果：", a + b)
            print("a * 2输出结果：", a * 2)
            print("a[1]输出结果：", a[1])
            print("a[1:4]输出结果：", a[1:4])
            if "H" in a:
                print("H在变量a中")
            else:
                print("H不爱变量a中")
            if "M" not in a:
                print("M不在变量a中")
            else:
                print("M在变量a中")
            print(r'\n')
            print(R'\n')
        output===>
                a + b输出结果： HelloPython
                a * 2输出结果： HelloHello
                a[1]输出结果： e
                a[1:4]输出结果： ell
                H在变量a中
                M不在变量a中
                \n
                \n
5. python字符串格式化
    python支持格式化字符串的输出。尽管这样可能会用到非常复杂的表达式，但最近本的用法是将一个值插入到一个有字符串格式符%s的字符串中。
    在python中，字符串格式化使用与C中sprintf函数一样的语法。
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        print("我叫%s今年%d虽！" %('ZiChen', 10))
    python字符串格式化符号：
        %c      格式化字符串及其ASCII码
        %s      格式化字符串
        %u      格式化无符号整型
        %o      格式化无符号八进制数
        %x      格式化无符号十六进制数
        %X      格式化无符号十六进制数(大写)
        %f      格式化浮点数字，可指定小数点后的精度
        %e      用科学技术法格式化浮点数
        %E      作用同%e，用科学计数法格式化浮点数
        %g      %f和%e的简写
        %G      %f和%E的简写
        %p      用十六进制数格式化变量的地址
    格式化操作符辅助指令：
        *       定义宽度或者小数点精度
        -       用做左对齐
        +       在整数前面显示加号+
        <sp>    在整数前面显示空格
        #       在八进制数钱面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
        0       显示的数字前面填充'0'而不是默认的空格
        %       '%%'输出一个单一的'%'
        (var)   映射变量(字典参数)
        m.n.    m是显示的最小总宽度，n是小数点后的位数(如果可用的话)

    format格式化字符串：
    实例：
        >>> "{} {}".format("Hello", "World")
        'Hello World'
        >>> "{0} {1}".format("hello", "world")
        hello world
        >>> "{1} {0} {1}".format("hello", "world")
        world hello world
    也可以设置参数：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        print("网站名：{name}，地址{url}".format(name="菜鸟教程", url="www.runoob.com"))
        site = {"name":"菜鸟教程", "url":"www.runoob.com"}
        print("网站名：{name}，地址{url}".format(**site))
        my_list = ['菜鸟教程', 'www.runoob.com']
        print("网站名：{0[0]}，地址{0[1]}".format("my_list"))
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        class AssignBalue(object):
            def __init__(self, value):
                self.value = value
        my_value = AssignValue(6)
        print('value为：{0.value}'.format(my_value))      # "0"是可选的
6. python三引号
    python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        para_str = """这是一个多行字符串的实例
        多行字符串可以使用制表符
        TAB(\t)。
        也可以使用换行符[\n]。
        """
        print(para_str)
    三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。
    一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。
        errHTML = '''
        <HTML><HEAD><TITLE>
        Friends CGI Demo</TITLE></HEAD>
        <BODY><H3>ERROR</H3>
        <B>%s</B><P>
        <FORM><INPUT TYPE = button BALUE = Back
        ONCLICK = "window.history.back()"></FORM>
        </BODY></HTML>
        '''
        cursor.execute('''
        CREATE TABLE users(
        login VARCHAR(8),
        uid INTEGER,
        prid INTEGER)
        ''')
7. f-string
    f-string是python3.6之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。
    之前我们习惯用百分号(%):
        >>> name = 'Runoob'
        >>> 'Hello %s' % name
        'Hello Runoob'
    f-string格式化字符串以f开头，后面跟着字符串，字符串中的表达式用大括号{}包起来，它会将变量或表达式计算后的值替换进去，实例如下：
        >>> name = 'Runoob'
        >>> f'Hello {name}'
        >>> f'{1 + 2}'
        '3'
        >>> w = {'name': 'Runoob', 'url': 'www.runoob.com'}
        >>> f'{w["name"]}: {w["url"]}'
        'Runoob: www.runoob.com'