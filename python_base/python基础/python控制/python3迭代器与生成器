Python3迭代器与生成器
一、迭代器
    迭代是python最强大的功能之一，是访问集合元素的一种方式。
    迭代器是一个可以记住遍历的位置的对象。
    迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完整结束。迭代器只能往前不会后退。
    迭代器有两个基本的方法： iter() 和 next()
    字符串，列表或元组对象都可用于创建迭代器：
    实例：
        >>> list = [1, 2, 3, 4]
        >>> it = iter(list)         # 创建迭代器对象
        >>> print(next(it))
        1
        >>> print(next(it))
        2
        >>>
    迭代器对象可以使用for循环进行遍历：
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        list = [1, 2, 3, 4]
        it = iter(list)
        for x in it :
            print(x, end=" ")
    也可以使用next()函数：
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        liat = [1, 2, 3, 4]
        it = iter(list)
        while True :
            try :
                print(next(it))
            exception StopInteration :
                sys.exit()
    1. 创建一个迭代器
        把一个类作为一个迭代器使用，需要在勒种实现两个方法， __iter__() 与 __next__()。
        如果你已经了解了面向对象编程，就知道类都有一个构造函数，python的构造函数为__init__()，它会在对象初始化的时候执行。
        __iter__()方法返回一个特殊的迭代器对象，这个迭代器对象实现了__next__()方法并通过StopIteration异常标识迭代的完成。
        __next__()方法会返回下一个迭代器对象。
        创建一个返回数字的迭代器，初始值为1，逐步递增1：
        实例：
            class MyNumers:
                def __iter__(self):
                    self.a = 1
                    return self
                def __next__(self):
                    x = self.a
                    self.a += 1
                    return x
            myclass = MyNumbers()
            myiter = iter(myclass)
            print(next(myiter))
            print(next(myiter))
            print(next(myiter))
            print(next(myiter))
    2. StopIteration
        StopIteration异常用于标识迭代的完成，防止出现无限循环的情况，在__next__()方法中我们可以设置在完成指定循环次数后出发StopIteration异常来结束迭代。
        在20次迭代后停止执行：
        实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            import sys
            class MyNumbers:
                def __iter__(self):
                    self.a = 1
                    return self
                def __next__(self):
                    x = self.a
                    self.a += 1
                    return x
            myclass = MyNumbers()
            myiter = iter(myclass)            # iter()返回一个对象的迭代对象

            if __name__ == '__main__':
                while True:
                    i = next(myiter)
                    print(i)
                    if i > 99:
                        sys.exit()
二、生成器
    在python中，使用了yield的函数被称为生成器(generator)。
    跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解成生成器就是一个迭代器。
    在调用生成器运行的过程中，每次遇到yield时，函数会暂停并保存当前所有的运行信息，返回yield的值，并在下一次执行next()方法是从当前位置继续运行。
    调用一个生成器函数，返回的是一个迭代对象。
    以下实例使用yield实现斐波那契数列：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        import sys
        def fibonacci(n):       # 函数生成器 - 斐波那契数列
            a, b, counter = 0, 1, 0
            while True:
                if counter > n:
                    return
                yield a
                a, b = b, a + b
                counter += 1
        f = fibonacci(10)           # f 是一个迭代器，由生成器返回生成
        while True:
            try:
                print(next(f), end=" ")
            except StopIteration:
                sys.exit()