Python3 OS文件/目录方法
    os模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：
        os.access(path, mode)           检验权限模式
        os.chdir(path)                  改变当前工作目录
        os.chflags(path, flags)         设置路径的标记为数字标记
        os.chmod(path, mode)            更改权限
        os.chown(path, uid, gid)        更改文件所有者
        os.chroot(path)                 改变当前进程的根目录
        os.close(fd)                    关闭文件描述符fd
        os.closerange(fd_low, fd_high)  关闭所有文件描述符，从fd_low(包含)到fd_high(不包含)，错误会忽略
        os.dup(fd)                      赋值文件描述符fd
        os.dup2(fd, fd2)                将一个文件描述符fd赋值到另一个fd2
        os.fchdir(fd)                   通过文件描述符改变当前工作目录
        os.fchmod(fd, mode)             改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限
        os.fchown(fd, uid, gid)         修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定
        os.fdatasync(fd)                强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息
        os.fdopen(fd[, mode[, bufsize]])    通过文件描述符fd创建一个文件对象，并返回这个文件对象
        os.fpathconf(fd, name)          返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值得字符串，这些名字在很多标准中指定(POSIX.1，Unix95，Unix98和其它)
        os.fstat(fd)                    返回文件描述符fd的状态，想stat()
        os.fstatvfs(fd)                 返回包含文件描述符fd的文件的文件系统的信息，Python3.3相当于stavfs()
        os.fsync(fd)                    强制将文件描述符为fd的文件写入硬盘
        os.ftruncate(fd, length)        裁剪文件描述符fd对应的文件，所以它最大不能超过文件大小
        os.getcwd()                     放回当前工作目录
        os.getcwdu()                    返回一个当前工作目录的Unicode对象
        os.isatty(fd)                   如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回True，否则False
        os.lchflags(path, flags)        设置路径的标记为数字标记，类似chflags()，但是没有软连接
        os.lchmod(path, mode)           修改链接文件权限
        os.lchown(path, uid, gid)       更改文件所有者，类似chown，但是不追踪连接
        os.link(src, dst)               创建硬链接，名为参数dst，指向参数src
        os.listdir(path)                返回path指定的文件夹包含的文件或文件夹的名字列表
        os.lseek(fd, pos, how)          设置文件描述符fd当前位置为pos，how方式修改；SEEK_SET或者0设置从文件开始的计算的pos；SEEK_CUR或者1则从当前位置计算；os.SEEK_END或者2则从文件尾部开始；在unix，Windows中有效
        os.lstat(path)                  想stat，但是没有软连接
        os.major(device)                从原始的设备号中提取设备major号码(使用stat中的st_dev或者st_rdev_field)
        os.makedev(major, minor)        以major和minor设备号组成一个原始设备号
        os.makedirs(path[, mode])       递归文件夹创建函数。想mkdir()，但创建的所有intermediate-level文件夹需要包含子文件夹
        os.minor(divice)                从原始的设备号中提取设备minor号码(使用stat中的st_dev或者st_rdev_field)
        os.mkdir(path[, mode])          以数字mode的mode创建一个名为path的文件夹，默认的mode是0777(八进制)
        os.mkfifo(path[, mode])         创建命名管道，mode位数字，默认为0666(八进制)
        os.mknod(filename[, mode=0600, device]) 创建一个名为filename文件系统节点(文件，设备特别文件或者命名pipe)
        os.open(file, flags[, mode])    打开一个文件，并且设置需要的打开选项，mode参数是可选的
        os.openpty()                    打开一个新的伪终端对。返回pty和tty的文件描述符
        os.pathconf(path, name)         返回相关文件的系统配置信息
        os.pipe()                       创建一个管道，返回一对文件描述符(r, w)分别为读和写
        os.popen(command[, mode[, bufsize]])    从一个command打开一个管道
        os.read(fd, n)                  从文件描述符fd中读取最多n个字节，返回包含读取字节的字符串，文件描述符fd对应文件已达到结尾，返回一个空字符串
        os.readlink(path)               返回软连接所指向的文件
        os.remove(path)                 删除路径为path的文件。如果path是一个文件夹，将抛出OSError；查看下面的rmdir()删除一个directory
        os.removedirs(path)             递归删除目录
        os.rename(src, dst)             将文件src重命名为dst
        os.renames(old, new)            递归地对目录进行改名，也可以对文件进行更名
        os.rmdir(path)                  删除path指定的空目录，如果目录非空，则抛出一个OSError异常
        os.stat(path)                   获取path指定的路径信息，功能等同于C API中的stat()系统调用
        os.stat_float_times([newvalue]) 决定stat_result是否已float对象显示时间戳
        os.statvfs(path)                获取指定路径的文件系统统计信息
        os.symlink(src, dst)            创建一个软连接
        os.tcgetpgrp(fd)                返回与终端fd(一个由os.open()返回的打开的文件描述符)关联的进程组
        os.tcsetpgrp(fd)                设置与终端fd(一个由os.open()返回的打开的文件描述符)关联的进程组pg
        os.tempnam([dir[, prefix]])     Python3中已删除。 返回唯一的路径名用于创建临时文件
        os.tmpfile()                    Python3中已删除。 返回一个打开的模式为(w+b)的文件对象，这文件对象没有文件夹入口，没有文件描述符，将会自动删除
        os.tmpnam()                     Python3中已删除。 为创建一个临时文件返回一个唯一的路径
        os.ttyname(fd)                  返回一个字符串，他表示与文件描述符fd关联的终端设备。如果fd没有与终端设备关联，则引发一场
        os.unlink(path)                 删除文件路径
        os.utime(path, times)           返回指定的path文件的访问和修改的时间
        os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])   输出在文件夹中的文件名通过在树中游走，向上或者向下
        os.write(fd, str)               写入字符串到文件描述符fd中，返回实际写入的字符串长度
        os.path模块                     获取文件的属性信息
        os.pardir()                     获取当前目录的父目录，以字符串形式显示目录名