python3 面向对象
1. 面向对象基数简介
    类class
    方法
    类变量
    数据成员
    方法重写
    局部变量
    实例变量
    继承
    实例化
    对象
2. 类定义
    #!/usr/bin/python
    # -*- coding: utf-8 -*-

    class classname:
        <statement - 1>
        ...
        ...
        <statement - n>
3. 类对象
    #!/usr/bin/python
    # -*- coding: utf-8 -*-
    class myclass:
        """
        一个简单的类实例
        """
        i = 12345
        def f(self):
            return 'hello world'
    # 访问类的属性和方法
    print("myclass类的属性i为：", x.i)
    print("myclaa类的方法f输出为：", x.f())
    以上创建了一个新的类实例并将该对象赋给局部变量x， x为空的对象。
    执行以上程序输出结果为：
        myclass 类的属性 i 为：12345
        myclass 类的方法 f 输出为：hello world
    类有一个名为 ___init__()的特殊方法(构造方法)，该方法在类实例化时会自动调用，像下面这样：
        def __init__(self):
            self.data = []
    类定义了 __init__()方法，类的实例化操作会自动调用 __init__()方法。如下实例化类myclass，对应的__init__()方法就会被调用：
        x = myclass()
    当然， __init__()方法可以有参数，参数通过 __init__()传递到类的实例化操作上。例如：
        #!/usr/bin/python
        # -*- coding: utf-8 -*-
        class complex:
            def __init__(self, realpart, imagpart):
                self.r = realpart
                self.i = imagpart
        x = complex(3.0, -4.5)
        print(x.r, x.i)     # 输出结果：3.0 -4.5
4. self代表类的实例，而非类
    类的方法与普通的函数只有一个特别的区别--它们必须有一个额外的第一个参数名称，按照惯例它的名称是self。
        class test:
            def prt(self):
                print(self)
                print(self.__class__)
        t = test()
        t.prt()
    以上实例执行结果为：
        <__main__test instance at 0x100771878>
        __main__.test
    从执行结果可以很明显的看出，self代表的是类的实例，代表当前对象的地址，而self.class则指向类。
    self不是python关键字，我们把它换成runoob也是可以正常执行的：
        class test:
            def prt(runoob):
                print(runoob)
                print(runoob.__class__)
    t = test()
    t.prt()
    以上实例执行结果为：
        <__main__test instance at 0x100771878>
        __main__.test
5. 类的方法
    在类的内部，使用def关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数self，且为第一个参数，self代表类的实例。
        #!/usr/bin/python
        # -*- coding: utf-8 -*-
        # 定义类
        class people:
            # 定义基本属性
            name = ''
            age = 0
            # 定义私有属性，私有属性在类外部无法直接进行访问
            __weight = 0
            # 定义构造方法
            def __init__(self, n, a, w):
                self.name = n
                self.age = a
                self.__weight = w
            def speak(self):
                print("%s 说： 我 %d 岁。", % (self.name, self.age))
        # 类的实例化
        p = people('runoob', 10, 30)
        p.speak()
    执行以上程序输出结果为：
        runoob 说： 我 10 岁。
6. 继承
    python同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。派生类的定义如下所示：
        class derivedclassname(baseclassname1):
            <statement - 1>
            .
            .
            .
            <statement - n>
    baseclassname(示例中的基类名)必须与派生类定义在一个作用域。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：
        class derivedclassname(modname.baseclassname)
    实例：
        #!/usr/bin/python
        # -*- coding: utf-8 -*-
        # 类定义
        class people:
            # 定义基本属性
            name = ''
            age = 0
            # 定义私有属性，私有属性在类外部无法直接进行访问
            __weight = 0
            # 定义构造方法
            def __init__(self, n, a, w):
                self.name = n
                self.age = a
                self.__weight = w
            # 定义类方法
            def speak(self):
                print("%s 说： 我 %d 岁。", % (self.name, self.age))
        # 单继承示例
        class student(people):
            grade = ''
            def __init__(self, n, a, w, g):
                # 调用父类的构造函数
                people.__init__(self, n, a, w)
                self.grade = g
            # 覆写父类的方法
            def speak(self):
                print("%s 说： 我 %d 岁，我在读 %d 年级", % (self.name, self.age, self.grade))
        s = student('ken', 10, 60, 3)
        s.speak()
    执行以上程序输出结果为：
        ken 说： 我 10 岁，我在读 3 年级
7. 多继承
    python同样有限的支持多继承形式。多继承的类定义形如下例：
        class derivedclassname(base1, base2, base3):
            <statement - 1>
            .
            .
            .
            <statement - n>
    需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。
    实例：
        #!/usr/bin/python
        # -*- coding: utf-8 -*-
        # 类定义
        class people:
            # 定义基本属性
            name = ''
            age = 0
            # 定义私有属性，私有属性在类外部无法直接进行访问
            __weight = 0
            # 定义构造方法
            def __init__(self, n, a, w):
                self.name = n
                self.age = a
                self.__weight = w
            def speak(self):
                print('%s 说：我 %d 岁。' % (self.name, self.age))
        # 单继承示例
        class student(people):
            grade = ''
            def __init__(self, n, a, w, g):
                # 调用父类构造函数
                people.__init(self, n, a, w)
                self.grade = g
            # 覆写父类的方法
            def speak(self):
                print("%s 说： 我 %d 岁，我在读 %d 年级", % (self.name, self.age, self.grade))

        # 另一个类，多重继承之前的准备
        class speaker():
            topic = ''
            name = ''
            def __init__(self, n, t):
                self.name = n
                self.topic = t
            def speak(self):
                print("我叫 %s，我是一个演说家，我演讲的主题是 %s" % (self.name, self.topic))
        # 多重继承1
        class sample(speaker, student):
            a = ''
            def __init__(self, n, a, w, g, t):
                student.__init__(self, n, a, w, g)
                speaker.__init__(self, n, t)
        test = sample('tim', 25, 80, 4, 'python')
        test.speak()    # 方法名相同，默认调用的是在继承中，排在靠前的父类的方法。
        输出结果为：
            我叫 tim，我是一个演说家，我演讲的主题是 python
        # 多重继承2
        class sample(student, speaker):
            a = ''
            def __init__(self, n, a, w, g, t):
                student.__init__(self, n, a, w, g)
                speaker.__init__(self, n, t)
        test = sample('tim', 25, 80, 4, 'python')
        test.speak()    # 方法名相同，默认调用的是在继承中，排在靠前的父类的方法。
        输出结果为：
            tim 说： 我 25 岁，我在读 4 年级
8. 方法重写
    如果我们的父类方法的功能不能满足我们的要求，我们也可以在子类重写父类的方法，实例如下：
    实例：
        #!/usr/bin/python
        # -*- coding: utf-8 -*-
        class parent:       # 父类
            def mymethod(self):
                print('调用父类方法')
        class child(parent):    # 定义子类
            def mymethod(self):
                print('调用子类方法')
        c = child()     # 子类实例
        c.mymethod()    # 子类调用重写方法
        super(child, c).mymethod()  # 用子类对象调用父类已被覆盖的方法
    执行结果：
        调用子类方法
        调用父类方法
    补充：super()函数： 用于调用父类(超类)的一个方法。
        语法：
            super(type[, object-or-type])
        参数
            - type - 类
            - object - or - type - 类，一般是self
        python3.x和python2.x的一个区别是：python3可以使用直接使用 super().xxx代替 super(class, self).xxx：
        python3.x实例：
            class a:
                def add(self, x):
                    y = x + 1
                    print(y)
            class b(a):
                def add(self, x):
                    super().add(x)
            b = b()
            b.add(2)    # 3
        python2.x实例：
            class a(object):            # python2.x 记得继承object
                def add(self, x):
                    y = x + 1
                    print(y)
            class b(a):
                def add(self, x):
                    super(b, self).add(x)
            b = b()
            b.add(2)    # 3
        supper()返回值==> 无
        实例：
            以下展示了使用super函数的实例：
            实例：
                #!/usr/bin/python
                # -*- coding: utf-8 -*-
                class fooparent(object):
                    def __init__(self):
                        self.parent = 'i\'m the parent.'
                        print('parent')
                    def bar(self, message):
                        print("%s from parent" % message)
                class foochild(fooparent):
                    def __init__(self):
                        # super(foochild, self)首先找到foochild的父类(就是类fooparent)，然后把类foochild的对象转换为类fooparent的对象
                        super(foochild, self).__init__()
                        print('child')
                    def bar(self, message):
                        super(foochild, self).bar(message)
                        print('child bar function')
                        print(self.parent)
                if __name__ == '__main__':
                    foochild = foochild()
                    foochild.bar('helloworld')
                执行结果：
                    parent                  # 父类构造
                    child                   # 子类构造
                    helloworld from parent  # 父类bar()方法
                    child bar function      # 子类bar()方法
                    I'm the parent          # 子类调用父类的方法，并打印出来
9. 类的属性和方法
    1） 类的私有属性
        __private_attrs: 两个下划线开头，声明该属性为私有，不能再类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
    2） 类的方法
        在累的内部使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。
        self 的名字并不是规定死的，也可以使用this，但是最好还是按照约定使用 self。
    3） 类的私有方法
        __private_method: 两个下划线开头，声明该方法为私有方法，只能在类的内部调用，不能再类的外部调用。 self.__private_methods。
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        class JustCounter:
            __secretCount = 0   # 私有变量
            publicCount = 0     # 公开变量

            def count(self):
                self.__secretCount += 1
                self.publicCount += 1
                print(self.__secretCount)
        counter = JustCounter()
        counter.count()
        counter.count()
        print(counter.publicCount)
        print(counter.__secretCount)    # 报错，实例不能访问私有变量
        执行以上程序输出结果：
            1
            2
            2
            Traceback (most recent call last):
               File "test.py", line 16, in <module>
                  print (counter.__secretCount)     # 报错，实例不能访问私有变量
            AttributeError: 'JustCounter' object has no attribute '__secretCount'
        类的私有方法实例如下：
        实例：
            #!/usr/bin/python
            # -*- conding: UTF-8 -*-
            class Site:
                def __init__(self, name, url):
                    self.name = name            # public
                    self.__url = url            # private
                def who(self):
                    print('name : ', self.name)
                    print('url : ', self.__url)
                def __foo(self):                # 私有方法
                    print('这是私有方法')
                def foo(self):                  # 公共方法
                    print('这是公共方法')
                    self.__foo()
            x = Site('菜鸟教程'， 'www.runoob.com')
            x.who()     # 正常输出
            x.foo()     # 正常输出
            x.__foo()   # 报错
10. 类的专有方法
    __init__        构造方法，生成对象时调用
    __del__         析构函数，释放对象时使用
    __repr__        打印，转换
    __setitem__     按照索引赋值
    __getitem__     按照索引获取值
    __len__         获取长度
    __cmp__         比较运算
    __call__        函数调用
    __add__         加运算
    __sub__         减运算
    __mul__         乘运算
    __truediv__     除运算
    __mod__         求余运算
    __pow__         乘方
11. 运算符重载
    实例：
        #!/usr/bin/python
        # -*- conding: UTF-8 -*-
        class Vector:
            def __init__(self, a, b):
                self.a = a
                self.b = b
            def __str__(self):
                return 'Vector (%d, %d)' % (self.a, self.b)
            def __add__(self, other):
                return Vector(self.a + other.a, self.b + other.b)
        v1 = Vector(2, 10)
        v2 = Vector(5, -2)
        print(v1 + v2)
        以上代码执行结果如下所示：
            Vector(7, 8)