Python3函数
    函数时组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。
    函数能提高应用的模块性，和代码的重复利用率。我们已经知道python提供了许多内建函数，比如print()。但我们也可以自己创建函数，这被称为自定义函数。
1. 定义一个函数
    例如：
        def max(a, b):
            if a > b:
                return a
            else:
                return b
2. 语法
    python定义函数使用def关键字，一般格式如下：
        def 函数名(参数列表):
            函数体
        默认情况下，参数值和参数名成是按函数声明中定义的顺序匹配起来的。
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def hello():
            print("hello world!")
        hello()
3. 函数调用
    定义一个函数：给了函数一个名称，制定了函数里包含的参数，和代码块结构。
    这个函数的基本结构完成以后，我们可以通过另一个函数调用执行，也可以直接从python命令提示符执行。
    如下实例调用了printme()函数：
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def printme(str):
            print(str)
            return
        printme("我要调用用户自定义函数！")
        printme("再次调用同一个函数")
4. 参数传递
    在python中，类型属于对象，变量是没有类型的
        a = [1, 2, 3]
        a = "Runoob"
    以上代码中，[1, 2, 3]是list类型，"Runoob"是String类型，而变量a是没有类型的，它仅仅是一个对象的引用(一个指针)，可以是指向list类型对象，也可以是指向String类型对象。
    a. 可更改(mutable)与不可更改(immutalbe)对象
        在python中，string，tuples，和numbers是不可更改的对象，而list，dict等是可以更改的对象。
        1） 不可变类型：变量赋值a = 5后再赋值a = 10，这里实际是新生成一个int值对象10，再让a指向它，而5被丢弃，不是改变a的值，相当于新生成了a。
        2） 可变类型：变量赋值la = [1, 2, 3, 4]后在赋值la[2] = 5则是将list la的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。
    python函数的参数传递：
        1） 不可变类型：类似C++的值传递，如整数、字符串、元组。如fun(a)，传递的值是a的值，没有影响a对象本身。如果在fun(a)内部修改a的值，则是新生成来一个a。
        2） 可变类型：类似C++的引用，如列表、字典。如fun(la)，则是将la真正的传递过去，修改后fun外部的la也会受影响
    python中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。
    b. python传不可变对象实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def change(a):
            print(id(a))    # 指向的是同一个对象
            a = 10
            print(id(a))    # 一个新对象
        a = 1
        print(id(a))
        change(a)
        可以看见在调用函数前后，形参和实参指向的是同一个对象(对象id相同)，在函数内部修改形参后，形参指向的是不同的id。
    c. 传可变对象实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def changeme(mylist):
            mylist.append([1, 2, 3, 4])
            print("函数内取值：", mylist)
            return
        mylist = [10, 20, 30]
        changeme(mylist)
        print("函数外取值：", mylist)
5. 参数
    以下是调用函数时可使用的正式参数类型：
        - 必须参数
        - 关键字参数
        - 默认参数
        - 不定长参数
    1) 必须参数
        必须参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。
        调用printme()函数，我们必须传入一个参数，不然会出现语法错误：
        实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            def printme(str):
                print(str)
                return
            printme()
    2) 关键字参数
        关键字参数和函数调用关系密切，函数调用使用关键字参数来确定传入的参数值。
        使用关键字参数允许函数调用时参数的顺序与生命时不一致，因为python解释器能够使用参数名匹配参数值。
        以下实例在函数printme()调用时使用参数名：
        实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            def printme(str):
                print(str)
                return
            printme(str = "菜鸟教程")
        以下实例演示函数参数的使用不需要指定顺序：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            def printinfo(name, age):
                print("名字：", nama)
                print("年龄：", age)
                return
            printinfo( age = 50, name = "子辰")
    3) 默认参数
        调用函数时，如果没有传递参数，则会使用默认参数。以下实例中，如果没有传入age参数，则使用默认值：
        实例：
            #!/usr/bin/python
            # -*- coding: UTF-8 -*-
            def printinfo(name, age = 15):
                print("名字：", name)
                print("年龄；", age)
                return
            printinfo(name = "子辰")
            print(name = "子辰", age = 17)
    4) 不定长参数：
        a. 带有一个星号 * 的参数
            我们可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述三种参数不同，声明时不会命名。基本语法如下：
                def functionname([formal_args,] *var_args_tuple):
                    "函数_文档字符串"
                    function_suite
                    return [expression]
            加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。
            实例1：
                #!/usr/bin/python
                # -*- coding: UTF-8 -*-
                def printinfo(arg1, *vartuple):
                    "打印在任何传入的参数"
                    print("输出：")
                    print(arg1)
                    print(vartuple)
                printinfo(70, 60, 50)
                output==>
                    70
                    (60, 50)
            实例2：如果我们不给传递参数，那么不定长参数就是一个空元组：
                #!/usr/bin/python
                # -*- coding: UTF-8 -*-
                def printinfo(arg1, *vartuple):
                    print("输出：")
                    print(arg1)
                    for var in vartuple:
                        print(var)
                    return
                printinfo(70)
                print(70, 60, 50)
                output==>
                    输出：
                    70
                    输出：
                    70
                    60
                    50
        b. 带有两个星号 ** 的参数
            语法如下：
                def functionname([formal_args,] **var_args_dict):
                    "函数_文档字符串"
                    function_suite
                    return [expression]
            加了两个星号 ** 的参数会以字典的形式导入：
            实例：
                #!/usr/bin/python
                # -*- coding: UTF-8 -*-
                def printinfo(arg1, **vardict):
                    "打印任何传入的参数"
                    print(arg1)
                    print(vardict)
                printinfo(1, a = 2, b = 3)
                output==>
                    1
                    {'a' = 2, 'b' = 3}
        c. 只带有星号 * 的参数：
            声明函数时，参数中星号 * 可以单独出现，例如：
                def f(a, b, *, c):
                    return a + b + c
            如果单独出现星号 * 后的参数必须用关键字传入：
                >>> def f(a, b, *, c):
                >>>f(1, 2, 3)
                报错
                >>>f(1, 2, c = 3)
                6
6. 匿名函数
    python使用lambda来创建匿名函数。
    所谓匿名，意即不再使用def语句这样标准的形式定义一个函数。
        - lambda只是一个表达式，函数体比def简单很多。
        - lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
        - lambda函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。
        - 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
    语法：
        lambda函数的语法质保函一个语句，如下：
            lambda [arg1[, arg2[, ...... argn]]]: expression
    实例如下：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        sum = lambda arg1, arg2: arg1 + arg2
        print("相加后的值为：", sum(10, 20))
        print("相加后的值为：", sum(20, 20))
        output==>
            相加后的值为: 30
            相加后的值为: 40
    匿名函数，可以使用关键字参数来传递，也可设定默认值(即默认值参数)
7. return语句
    return[表达式]语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值得return语句返回None。之前的例子都没有示范如何返回数值，以下实例演示了return语句的用法：
    实例：
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def sum(arg1, arg2):
            total = arg1 + arg2
            print("函数内：", total)
            return total
        total = sum(10, 20)
        print("函数外：", total)
        output==>
            函数内： 30
            函数外： 30
8. 强制位置参数
    python3.8新增了一个函数形参语法/用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。
    在以下例子中，形参a和b必须使用指定位置参数，c或d可以是位置形参或关键字形参，而e或f要求为关键字形参：
        def f(a, b, /, c, d, *, e, f):
            print(a, b, c, d,e, f)
    以下使用方法是正确的：
        f(10, 20, 30, d = 40, e = 50, f = 60)
        f(10, 20, 30, 40, e = 50, f = 60)
    实例：(代码运行以上代码)
        #!/usr/bin/python
        # -*- coding: UTF-8 -*-
        def f(a, b, /, c, d, *, e, f):
            sum = a + b + c + d + e + f
            return sum

        if __name__ == '__main__':
            print(f(10, 20, 30, 40, e=50, f=60))

        if __name__ == '__main__':
            print(f(10, 20, c=30, d=30, e=70, f=100))
        output==>
            210
            260
    注意：/ 为参数时，后面的参数传值可以为位置形参，也可以为关键字参数。
         * 为参数时，后面的参数传值必须为关键字参数。
        四种参数位置最好不要改变：
            必须参数， 关键字参数， 默认值参数， 不定长参数(一颗星*arg，两颗星**arg，只有一颗星*，强制位置参数/)
            必须参数、可变参数、默认值参数、可变关键字参数
            def f(a, b, /, *c, d=1, **e)
            关键字参数必须在位置参数后面。